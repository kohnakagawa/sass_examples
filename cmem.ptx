//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19324607
// Cuda compilation tools, release 7.0, V7.0.27
// Based on LLVM 3.4svn
//

.version 4.2
.target sm_35
.address_size 64

	// .weak	cudaMalloc
.const .align 8 .f64 cf_c;

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z11add_and_mulddd
.visible .func  (.param .b64 func_retval0) _Z11add_and_mulddd(
	.param .b64 _Z11add_and_mulddd_param_0,
	.param .b64 _Z11add_and_mulddd_param_1,
	.param .b64 _Z11add_and_mulddd_param_2
)
{
	.reg .f64 	%fd<6>;


	ld.param.f64 	%fd1, [_Z11add_and_mulddd_param_0];
	ld.param.f64 	%fd2, [_Z11add_and_mulddd_param_1];
	ld.param.f64 	%fd3, [_Z11add_and_mulddd_param_2];
	add.f64 	%fd4, %fd1, %fd2;
	mul.f64 	%fd5, %fd4, %fd3;
	st.param.f64	[func_retval0+0], %fd5;
	ret;
}

	// .globl	_Z7kernel1Pdd
.visible .entry _Z7kernel1Pdd(
	.param .u64 _Z7kernel1Pdd_param_0,
	.param .f64 _Z7kernel1Pdd_param_1
)
{
	.reg .s32 	%r<5>;
	.reg .f64 	%fd<4>;
	.reg .s64 	%rd<5>;


	ld.param.u64 	%rd1, [_Z7kernel1Pdd_param_0];
	ld.param.f64 	%fd1, [_Z7kernel1Pdd_param_1];
	cvta.to.global.u64 	%rd2, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mad.lo.s32 	%r4, %r3, %r2, %r1;
	mul.wide.s32 	%rd3, %r4, 8;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f64 	%fd2, [%rd4];
	mul.f64 	%fd3, %fd2, %fd1;
	st.global.f64 	[%rd4], %fd3;
	ret;
}

	// .globl	_Z7kernel2Pd
.visible .entry _Z7kernel2Pd(
	.param .u64 _Z7kernel2Pd_param_0
)
{
	.reg .s32 	%r<5>;
	.reg .f64 	%fd<4>;
	.reg .s64 	%rd<5>;


	ld.param.u64 	%rd1, [_Z7kernel2Pd_param_0];
	cvta.to.global.u64 	%rd2, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mad.lo.s32 	%r4, %r3, %r2, %r1;
	ld.const.f64 	%fd1, [cf_c];
	mul.wide.s32 	%rd3, %r4, 8;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f64 	%fd2, [%rd4];
	mul.f64 	%fd3, %fd1, %fd2;
	st.global.f64 	[%rd4], %fd3;
	ret;
}

	// .globl	_Z7kernel3Pd
.visible .entry _Z7kernel3Pd(
	.param .u64 _Z7kernel3Pd_param_0
)
{
	.reg .s32 	%r<5>;
	.reg .f64 	%fd<4>;
	.reg .s64 	%rd<5>;


	ld.param.u64 	%rd1, [_Z7kernel3Pd_param_0];
	cvta.to.global.u64 	%rd2, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mad.lo.s32 	%r4, %r3, %r2, %r1;
	mul.wide.s32 	%rd3, %r4, 8;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f64 	%fd1, [%rd4];
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd1;
	.param .b64 param1;
	st.param.f64	[param1+0], %fd1;
	.param .b64 param2;
	st.param.f64	[param2+0], %fd1;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z11add_and_mulddd, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.f64	%fd2, [retval0+0];
	
	//{
	}// Callseq End 0
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd2;
	.param .b64 param1;
	st.param.f64	[param1+0], %fd2;
	.param .b64 param2;
	st.param.f64	[param2+0], %fd2;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z11add_and_mulddd, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.f64	%fd3, [retval0+0];
	
	//{
	}// Callseq End 1
	st.global.f64 	[%rd4], %fd3;
	ret;
}

	// .globl	_Z7kernel4Pd
.visible .entry _Z7kernel4Pd(
	.param .u64 _Z7kernel4Pd_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<5>;
	.reg .f64 	%fd<2>;
	.reg .s64 	%rd<5>;


	ld.param.u64 	%rd1, [_Z7kernel4Pd_param_0];
	cvta.to.global.u64 	%rd2, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mad.lo.s32 	%r4, %r3, %r2, %r1;
	setp.lt.s32	%p1, %r4, 100;
	mul.wide.s32 	%rd3, %r4, 8;
	add.s64 	%rd4, %rd2, %rd3;
	selp.f64	%fd1, 0d4024000000000000, 0d0000000000000000, %p1;
	st.global.f64 	[%rd4], %fd1;
	ret;
}

	// .globl	_Z7kernel5Pl
.visible .entry _Z7kernel5Pl(
	.param .u64 _Z7kernel5Pl_param_0
)
{
	.reg .s32 	%r<5>;
	.reg .s64 	%rd<7>;


	ld.param.u64 	%rd1, [_Z7kernel5Pl_param_0];
	cvta.to.global.u64 	%rd2, %rd1;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mad.lo.s32 	%r4, %r3, %r2, %r1;
	mul.wide.s32 	%rd3, %r4, 8;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.u64 	%rd5, [%rd4];
	add.s64 	%rd6, %rd5, %rd5;
	st.global.u64 	[%rd4], %rd6;
	ret;
}


